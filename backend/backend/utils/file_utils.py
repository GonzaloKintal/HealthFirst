import base64
import re
import os
import pytesseract
import unicodedata
import joblib

from PIL import Image
from pdfminer.high_level import extract_text
from datetime import datetime
from io import BytesIO
from PyPDF2 import PdfReader
from pdf2image import convert_from_path






def is_pdf_image(base64_pdf):
    """Determina si el PDF es una imagen (sin texto extraíble)"""
    pdf_bytes = base64.b64decode(base64_pdf)
    text = extract_text(BytesIO(pdf_bytes))
    return not bool(text.strip())  # True si NO hay texto (es imagen)

def base64_to_text(base64_pdf, is_image=False):
    """Decodifica Base64 y extrae texto. Le avisas si es una imagen pdf la que vas a pasar"""
    try:
        pdf_bytes = base64.b64decode(base64_pdf)
        with open("temp.pdf", "wb") as temp_file:
            temp_file.write(pdf_bytes)
        
        if not is_image:
            with open("temp.pdf", "rb") as file:
                text = "".join([page.extract_text() for page in PdfReader(file).pages])
        else:
            text = ""
            for img in convert_from_path("temp.pdf"):
                text += pytesseract.image_to_string(img)
        
        return text
    except Exception as e:
        print(f"Error: {e}")
        return None
    finally:
        if os.path.exists("temp.pdf"):
            os.remove("temp.pdf")




def normalize_text(text): #REVISAR
    """Saca las tildes del texto pero mantiene ñ y Ñ, y lo manda todo en minuscula"""
    normalized_text = unicodedata.normalize('NFD', text)
    clean_text = []
    for char in normalized_text:
        # Keep ñ/Ñ and non-accented characters
        if char in ['ñ', 'Ñ']:
            clean_text.append(char)
        else:
            # Saca los acentos pero mantiene la letra base
            if unicodedata.category(char) != 'Mn':
                clean_text.append(char)
    return (''.join(clean_text)).lower()



def search_dni_in_text(text, dni):
    """Busca un DNI (sin puntos) en un texto que puede tenerlo con/sin puntos/espacios.  """
    # Elimina puntos y espacios del texto para normalizarlo
    text_clean = re.sub(r'[.\s]', '', text)
    # Busca el DNI (sin puntos) como palabra completa (\b = límite de palabra)
    pattern = r'\b{}\b'.format(re.escape(str(dni)))
    return re.search(pattern, text_clean) is not None

def search_in_pdf_text(text, search_terms):
    """Busca términos en el texto, manejando DNIs en el texto con/sin puntos"""
    text_lower = text.lower()  # Texto del certificado en minúsculas
    
    for term in search_terms:
        term_str = str(term).lower()
        
        # Caso especial para DNIs (numéricos sin puntos)
        if term_str.isdigit():  # Asume que el DNI en search_terms NO tiene puntos
            if not search_dni_in_text(text_lower, term_str):  # Busca el DNI limpio
                return False
        else:
            # Búsqueda normal para nombres/apellidos
            if term_str not in text_lower:
                return False
    return True


def date_in_range(certificate_text,license):
    """Verifica si una fecha encontrada en texto_certificado está entre licencia.start_date y licencia.end_date. """
    # Busca fechas en formato dd-mm-aaaa o dd/mm/aaaa

    match = re.search(r'(\d{2})[-/](\d{2})[-/](\d{4})',certificate_text)
    if not match:
        return False
    
    day,month, year = map(int, match.groups())
    certificate_date = datetime(year,month,day).date()
    
    return license.start_date <= certificate_date <= license.end_date




#Ya no sirve, solo para prueba
def pdf_to_base64_and_save(pdf_path, output_txt_path):
    """Convierte un PDF a Base64 y lo guarda en un .txt. Me sirve para el dataset"""
    #Lo uso para crear el dataset
    try:
        # Leer el PDF en modo binario
        with open(pdf_path, "rb") as pdf_file:
            pdf_bytes = pdf_file.read()
        
        # Codificar a Base64
        base64_bytes = base64.b64encode(pdf_bytes)
        base64_string = base64_bytes.decode('utf-8')
        
        # Guardar en un archivo .txt
        with open(output_txt_path, "w") as txt_file:
            txt_file.write(base64_string)
        
        print(f"¡Conversión exitosa! Base64 guardado en: {output_txt_path}")

    except FileNotFoundError:
        print(f" Error: No se encontró el archivo PDF en {pdf_path}")
    except Exception as e:
        print(f" Error inesperado: {str(e)}")

"""#PRUEBAS

#Para quedarme con el base64 de pdfs y tenerlo en .txt para el dataset 
pdf_to_base64_and_save(
    pdf_path="C:/Users/Usuario/Documents/LABORATORIO/certificados/constancia_examen_unlam.pdf",  # Cambia por tu ruta
    output_txt_path="C:/Users/Usuario/Documents/LABORATORIO/certificados/.txt/constancia_examen_unlam.txt"  # Cambia por tu ruta
    )
texto=""
texto_final=base64_to_text(texto,is_image=True)
print(texto_final)
#Paso el base64 a texto~
#texto=base64_to_text("C:/Users/Usuario/Documents/LABORATORIO/certificados/texto_prueba.pdf",is_image=True)
#texto=base64_a_texto(texto_base64,es_imagen=True)
#print(texto)
#Los datos del empleado que voy a buscar en el pdf
#search_term = ["2020","11222333","Docente"] 

# Aviso si encontre lo que buscaba
#found = search_in_pdf_base64(texto, search_term)
#print(f"¿Se encontró '{search_term}' en el PDF? {found}")
"""